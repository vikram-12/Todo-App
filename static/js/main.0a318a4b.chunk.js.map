{"version":3,"sources":["firebase.js","ToDo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Todo","props","List","className","ListItem","ListItemAvatar","ListItemText","primary","todo","secondary","Button","onClick","event","firestore","collection","doc","id","delete","App","useState","todos","settodos","input","setInput","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","value","onChange","target","disabled","type","preventDefault","add","timeStamp","FieldValue","serverTimestamp","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAceA,EAFJC,IAASC,cAVC,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,wCCcFC,MAbf,SAAcC,GACZ,OACE,eAACC,EAAA,EAAD,CAAMC,UAAU,YAAhB,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAcC,QAASN,EAAMO,KAAKA,KAAMC,UAAU,oBAGpD,cAACC,EAAA,EAAD,CAASC,QAAS,SAAAC,GAAK,OAAGtB,EAAGuB,YAAYC,WAAW,SAASC,IAAId,EAAMO,KAAKQ,IAAIC,UAAhF,8B,MCsDSC,MA/Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuBA,OArBAC,qBAAU,WACRlC,EAAGuB,YACAC,WAAW,SACXW,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EAASM,EAASC,KAAKC,KAAI,SAACd,GAAD,MAAU,CAACC,GAAID,EAAIC,GAAIR,KAAMO,EAAIe,OAAOtB,eAEtE,IAgBD,cADA,CACA,OAAKL,UAAU,MAAf,UACE,2DAEA,+BAEE,eAAC4B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,8CACA,cAACC,EAAA,EAAD,CACEC,MAAOZ,EACPa,SAAU,SAACvB,GAAD,OAAWW,EAASX,EAAMwB,OAAOF,UAE7C,cAACxB,EAAA,EAAD,CACA2B,UAAWf,EACXgB,KAAK,SACL3B,QAzBQ,SAACC,GACfA,EAAM2B,iBACNjD,EAAGuB,YAAYC,WAAW,SAAS0B,IAAI,CACrChC,KAAMc,EACNmB,UAAWlD,IAASsB,UAAU6B,WAAWC,oBAG3CpB,EAAS,KAmBHqB,QAAQ,YACRC,MAAM,UALN,2BAcJ,6BACGzB,EAAMS,KAAI,SAACT,GAAD,OACT,cAAC,EAAD,CAAMZ,KAAMY,aCnDP0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0a318a4b.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBKk0fI0178XakiyCvj2Fq4GcVfGJBn4uk\",\r\n  authDomain: \"todo-react-dab3d.firebaseapp.com\",\r\n  projectId: \"todo-react-dab3d\",\r\n  storageBucket: \"todo-react-dab3d.appspot.com\",\r\n  messagingSenderId: \"769076376896\",\r\n  appId: \"1:769076376896:web:a3ac8ce0e8cc754f07b6a5\",\r\n  measurementId: \"G-QLXXM6B4KN\",\r\n};\r\n\r\nconst db = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default db;\r\n","import React from \"react\";\r\nimport \"./Todo.css\";\r\nimport db from './firebase'\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nfunction Todo(props) {\r\n  return (\r\n    <List className=\"todo_list\">\r\n      <ListItem>\r\n        <ListItemAvatar></ListItemAvatar>\r\n        <ListItemText primary={props.todo.todo} secondary=\"‚è∞‚è∞\" />\r\n        \r\n      </ListItem>\r\n      <Button  onClick={event =>db.firestore().collection('todos').doc(props.todo.id).delete()}>‚ùéDelete</Button>\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from \"react\";\nimport { FormControl } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport { InputLabel } from \"@material-ui/core\";\nimport { Input } from \"@material-ui/core\";\nimport Todo from \"./ToDo\";\nimport \"./App.css\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nfunction App() {\n  const [todos, settodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n  //when appp loads we need to listen to the database to fetch new todos as they are added or removed\n  useEffect(() => {\n    db.firestore()\n      .collection(\"todos\")\n      .orderBy(\"timeStamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        settodos(snapshot.docs.map((doc) => ({id: doc.id ,todo: doc.data().todo})));\n      });\n  }, []);\n  //this code here fires .. when app.js loads\n\n  //console.log(input);\n  //function to add the value of input field to list\n  const addTodo = (event) => {\n    event.preventDefault();\n    db.firestore().collection(\"todos\").add({\n      todo: input,\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n    }); //prevent refresh on button clicked\n    //settodos([...todos, input]); //pushes the new values as input to the end of the list & the ... implies the previous values\n    setInput(\"\"); //to clear the input field\n  };\n  return (\n    // we are wrapping in form so that it gets submitted when we press enter\n    <div className=\"App\">\n      <h1>Hello Vikram üëã</h1>\n\n      <form>\n      \n        <FormControl>\n          <InputLabel>‚úîÔ∏èWrite your TODO ...</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n          <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add ToDo\n        </Button>\n\n        </FormControl>\n       \n      </form>\n\n      <ul>\n        {todos.map((todos) => (\n          <Todo todo={todos} />\n          //<li>{todo}</li>\n          //works as a loop and add all items into the list\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}